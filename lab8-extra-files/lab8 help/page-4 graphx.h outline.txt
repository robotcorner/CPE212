//    Note all previous Graph are now GraphX to distinguish from original
//

#ifndef GRAPHX_H
#define GRAPHX_H

// Forward declaration of ItemType

typedef int ItemType;

#include "queue.h"
#include "stack.h"
#include "LList.h"
#include <iostream>
#include<string>


template<class VertexType>
// Assumption: VertexType is a type for which the "=", "==", and "<<" are defined
class GraphXType
{
  private:
    int numVertices;
    int maxVertices;
//-  we will not be using vertices or edges in this new code
    VertexType* vertices;
    int edges[50][50];
    bool* marks; // marks[i] is mark for vertices[i].
    int* count;  // count[i] is count of length if this node's linked list
  public:
    GraphXType();
    GraphXType(int maxV);
    ~GraphXType();
    void MakeEmpty();
    bool IsEmpty() const;
    bool IsFull() const;//
//- we probably dont need this     void AddVertex(VertexType);
    void AddEdge(VertexType, VertexType, int);
// we probably dont need this   int WeightIs(VertexType, VertexType);
// we probably dont need this   int IndexIs(VertexType* vertices, VertexType vertex);
// we need to fix this if we want searching   void GetToVertices(VertexType, Queue&);
// we need to fix this    void ClearMarks();
// we need to fix this    void MarkVertex(VertexType);
// we need to fix this    bool IsMarked(VertexType);
// need to fix this    void DepthFirstSearch(GraphXType<VertexType> graph, VertexType startVertex, VertexType endVertex);
// need to fix this    void BreadthFirstSearch(GraphXType<VertexType> graph, VertexType startVertex, VertexType endVertex);
// need to fix this    void ShortestPath(VertexType startVertex, VertexType endVertex, Queue& path);   
// here are the new methods
    void MaxNode();
    void MinNode();
};
#include "graphx.cpp"

#endif
