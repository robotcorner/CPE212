        -:    0:Source:queue.cpp
        -:    0:Graph:queue.gcno
        -:    0:Data:-
        -:    0:Runs:0
        -:    0:Programs:0
        -:    1://*******  queue.cpp header Circular Queue Implementation **********
        -:    2:#include "queue.h"
        -:    3:
    #####:    4:Queue::Queue()			// Constructor
        -:    5:{
    #####:    6:  maxQue = 501;			// Want a queue which stores 500 elements
    #####:    7:  front = maxQue - 1;		// front == rear implies Empty
    #####:    8:  rear = maxQue -1;
    #####:    9:  items = new ItemType[maxQue];	// Allocate array for queue
    #####:   10:} // End Queue::Queue()
        -:   11:
        -:   12:
    #####:   13:Queue::Queue(int max)		// Parameterized constructor
        -:   14:{
    #####:   15:  maxQue = max + 1;			// Want a queue which stores max elements
    #####:   16:  front = maxQue - 1;		// front == rear implies Empty
    #####:   17:  rear = maxQue -1;
    #####:   18:  items = new ItemType[maxQue];	// Allocate array for queue
    #####:   19:} // End Queue::Queue(…)
        -:   20:
        -:   21:
    #####:   22:Queue::~Queue()			// Destructor
        -:   23:{
        -:   24://  delete [] items;			// Deallocate the queue array
    #####:   25:} // End Queue::~Queue()
        -:   26:
        -:   27:
    #####:   28:void Queue::MakeEmpty()		// Initialize queue to empty
        -:   29:{
    #####:   30:  front = maxQue - 1;		
    #####:   31:  rear = maxQue -1;
    #####:   32:} // Queue::MakeEmpty()
        -:   33:
        -:   34:
    #####:   35:bool Queue::IsEmpty() const		// Determine if queue is empty
        -:   36:{
    #####:   37:  return (front == rear);
        -:   38:} // End Queue::IsEmpty()
        -:   39:
        -:   40:
    #####:   41:bool Queue::IsFull() const		// Determine if queue is full
        -:   42:{
    #####:   43:  return ((rear + 1) % maxQue == front);
        -:   44:} // End Queue::IsFull()
        -:   45:
        -:   46:
    #####:   47:void Queue::Enqueue(ItemType newItem) 	// Add item to rear of queue
        -:   48:{				// Precondition:  queue NOT full
    #####:   49:  rear = (rear+1) % maxQue;
    #####:   50:  items[rear] = newItem;
    #####:   51:} // End Queue::Enqueue(…)
        -:   52:
        -:   53:
    #####:   54:void Queue::Dequeue(ItemType& item)	// Remove item from front of queue
        -:   55:{				// Precondition:  queue NOT empty
    #####:   56:  front = (front + 1) % maxQue;
    #####:   57:  item = items[front];
    #####:   58:} // End Queue::Dequque(…)
